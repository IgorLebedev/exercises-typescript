---

name: Тип object
theory: |

  В некоторых ситуациях, мы хотим ограничить входной параметр функции типом "объект". Например, для функции проверяющей наличие ключей в объекте. Существует несколько способов сделать такую проверку и не все из них работают так как ожидается. Посмотрите на пример:

  ```typescript
  // В качестве типа используется {}
  function foo(obj: {}) {
    return obj.toString();
  }

  foo('wow'); // Ok!
  foo(123); // Ok!
  foo({}); // Ok!
  ```

  Тип `{}` — это тип объекта и работает так же, как тип `Object` с некоторыми отличиями. Тип `Object` предопределяет типы некоторых встроенных методов, например, toString(), а тип `{}` этого не делает. Например:

  ```typescript
  // Благодаря боксингу (boxing)
  'hexlet'.hasOwnProperty === Object.prototype.hasOwnProperty;
  ```

  Тип `object`, напротив, работает только с не-примитивными значениями:

  ```typescript
  function foo(obj: object) {
    return obj.toString();
  }

  foo('wow'); // Error!
  foo(123); // Error!
  foo({}); // Ok!
  ```

  Функции тоже попадают под тип `object`, так как у них есть свойства, прототип и они `instanceof Object`.

  С помощью типа `object` нельзя получить доступ к свойствам объекта, для такой задачи используются уже другие механизмы.

instructions: |

  FIXME: В процессе ...

  Реализуйте функцию `extract()`, которая возвращает срез переданного объекта по указанным полям:

  ```typescript

  ```

# tips:

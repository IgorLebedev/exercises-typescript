---

name: Статические методы и свойства
theory: |

  Иногда нам требуется задать свойство или метод, который будет общим для всех экземпляров этого класса. Например, чтобы определить, является ли объект экземпляром класса. В таком случае при объявлении метода мы можем указать ключевое слово `static`, и он станет доступен через имя класса:

  ```typescript
  class File {
    private static readonly maxFileSize = 1000;
    static isFile(file: File): boolean {
      return file instanceof File;
    }

    protected static isFileTooBig(size: number): boolean {
      return size > File.maxFileSize;
    }

    constructor(private name: string, private size: number) {
      if (File.isFileTooBig(size)) {
        throw new Error('File is too big');
      }
    }
  }

  File.isFile(new File('open-world.jpeg', 1000)); // true
  ```
  
  <!-- TODO - автору: не хватает описания кода - на что обратить внимание, или что тут сделали -->
  
  Статическим методам и свойствам также можно назначить модификаторы доступа `public`, `protected` и `private` и модификатор неизменяемости `readonly`. Это позволяет ограничить использование свойств и методов только текущим классом или наследниками.

  В отличии от JavaScript в TypeScript статические свойства и методы не могут быть переопределены в подклассах:

  ```typescript
  class File {
    static maxFileSize = 1000;
    static isFile(file: File): boolean {
      return file instanceof File;
    }
  }

  class ImageFile extends File {
    static maxFileSize = 2000; // Error!
    static isFile(file: File): boolean { // Error!
      return file instanceof ImageFile;
    }
  }
  ```
  
  <!-- TODO - автору: не хватает описания кода - на что обратить внимание, или что тут сделали -->

  Такой код не удастся скомпилировать. При этом остается доступ к статическим свойствам и методам родительского класса:

  ```typescript
  const file = new ImageFile();
  console.log(ImageFile.maxFileSize); // 1000
  console.log(ImageFile.isFile(file)); // true
  ```
  
  <!-- TODO - автору: не хватает описания кода - на что обратить внимание, или что тут сделали -->

instructions: |

  Другое полезное применение статических свойств и методов — создание фабричных методов. Фабричный метод — это статический метод, который возвращает новый экземпляр класса. Реализуйте класс `UserResponse` с полем `user: string` и фабричный метод `fromArray`, который принимает массив и возвращает массив экземпляров класса `UserResponse`:

  ```typescript
  const response = UserResponse.fromArray(['user1', 'user2', 'user3']);
  console.log(response[0].user); // user1
  console.log(response[0] instanceof UserResponse); // true
  ```
